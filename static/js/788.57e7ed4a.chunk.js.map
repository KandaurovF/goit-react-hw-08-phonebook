{"version":3,"file":"static/js/788.57e7ed4a.chunk.js","mappings":"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","sources":["components/ContactForm/Config.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/IconButton/IconButton.module.css?34f6","components/IconButton/IconButton.jsx","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const schema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required!'),\n  number: Yup.string()\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Phone number is required!'),\n});\n\nexport const INITIAL_VALUES = {\n  name: '',\n  number: '',\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form__heading\":\"ContactForm_form__heading__60czZ\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"errorMessage\":\"ContactForm_errorMessage__HbfEx\",\"addContact\":\"ContactForm_addContact__Q30Jz\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { INITIAL_VALUES, schema } from './Config';\nimport { selectContacts } from 'redux/contactsReducer';\n// import { selectContacts } from 'redux/contacts/contactsSlice';\nimport { addContact } from 'redux/contactsReducer';\n// import { addContact } from 'redux/contacts/API';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = ({ closeModal }) => {\n  const inputNameId = nanoid();\n  const inputNumberId = nanoid();\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const onAddContact = newContact => {\n    const includesContact = contacts.filter(\n      contact =>\n        contact.name.toLowerCase().trim() ===\n          newContact.name.toLowerCase().trim() ||\n        contact.number.trim() === newContact.number.trim()\n    ).length;\n\n    if (includesContact) {\n      return Notify.failure(`${newContact.name}: is already in contacts`);\n    } else {\n      dispatch(addContact(newContact));\n    }\n    Notify.success(\n      `${newContact.name} was successfully added to your contacts`\n    );\n  };\n\n  const hendleSubmit = (values, { resetForm }) => {\n    onAddContact({ ...values });\n\n    resetForm();\n    closeModal();\n  };\n\n  return (\n    <>\n      <h2 className={css.form__heading}>Add contact</h2>\n      <Formik\n        initialValues={INITIAL_VALUES}\n        validationSchema={schema}\n        onSubmit={hendleSubmit}\n      >\n        <Form autoComplete=\"off\" className={css.form}>\n          <label className={css.label} htmlFor={inputNameId}>\n            <Field\n              className={css.input}\n              name=\"name\"\n              maxLength={22}\n              id={inputNameId}\n              type=\"text\"\n              placeholder=\" \"\n            />\n            <span>Name</span>\n            <ErrorMessage\n              className={css.errorMessage}\n              name=\"name\"\n              component=\"p\"\n            />\n          </label>\n\n          <label className={css.label} htmlFor={inputNumberId}>\n            <Field\n              className={css.input}\n              name=\"number\"\n              maxLength={22}\n              id={inputNumberId}\n              type=\"tel\"\n              placeholder=\" \"\n            />\n            <span>Number</span>\n            <ErrorMessage\n              className={css.errorMessage}\n              name=\"number\"\n              component=\"p\"\n            />\n          </label>\n          <button className={css.addContact} type=\"submit\">\n            Add contact\n          </button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"cardsListContainer\":\"ContactList_cardsListContainer__SseVj\",\"cardsList\":\"ContactList_cardsList__+j-4h\",\"card\":\"ContactList_card__-qmgN\",\"contactInfo\":\"ContactList_contactInfo__Sgq6p\",\"contactDelBtn\":\"ContactList_contactDelBtn__bbMaS\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contactsReducer';\n// import { selectContacts } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/filterSlice';\nimport { deleteContact } from 'redux/contactsReducer';\n// import { deleteContact } from 'redux/contacts/API';\nimport css from './ContactList.module.css';\nimport { Confirm } from 'notiflix';\n\nconst ContactList = () => {\n  const dispathc = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const contactsFilter = useSelector(selectFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(contactsFilter.toLowerCase())\n  );\n\n  const renderedContacts = contactsFilter === '' ? contacts : filteredContacts;\n\n  const handleDelete = id =>\n    Confirm.show(\n      'This will delete the contact',\n      'Are you sure?',\n      'Yes',\n      'No',\n      () => {\n        dispathc(deleteContact(id));\n      },\n      () => {\n        return;\n      },\n      {\n        backgroundColor: 'rgba(0, 0, 0, 0.9)',\n        borderRadius: '10px',\n        fontFamily: 'Orbitron',\n        titleColor: '#00ff00',\n        messageColor: '#008800',\n        okButtonColor: '#00ff00',\n        okButtonBackground: 'rgba(0, 255, 0, 0.4)',\n        cancelButtonColor: '#00ff00',\n        cancelButtonBackground: 'transparent',\n      }\n    );\n\n  return (\n    <div className={css.cardsListContainer}>\n      <ul className={`${css.cardsList} list`}>\n        {renderedContacts.map(contact => {\n          const { id, name, number } = contact;\n\n          return (\n            <li className={css.card} key={id}>\n              <div className={css.contactInfo}>\n                <p>{`${name}`}</p>\n                <p>{`${number}`}</p>\n              </div>\n\n              <button\n                className={css.contactDelBtn}\n                onClick={() => handleDelete(id)}\n              >\n                Del\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar__wrapper\":\"Filter_searchbar__wrapper__MnIKR\",\"search__icon\":\"Filter_search__icon__09p42\",\"searchInput\":\"Filter_searchInput__n8k5T\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contactsReducer';\n// import { selectContacts } from 'redux/contacts/contactsSlice';\nimport { selectFilter, setFilter } from 'redux/filterSlice';\n// import PropTypes from 'prop-types';\nimport { RiSearchLine } from 'react-icons/ri';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const filter = useSelector(selectFilter);\n\n  return (\n    <div className={css.searchbar__wrapper}>\n      <RiSearchLine className={css.search__icon} fill=\"#008800\" />\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(setFilter(e.target.value))}\n        placeholder={`Search contact from: ${contacts.length}`}\n        className={css.searchInput}\n      />\n    </div>\n  );\n};\n\n// Filter.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ),\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"iconButton\":\"IconButton_iconButton__zrc2u\"};","import PropTypes from 'prop-types';\nimport css from './IconButton.module.css';\n\nconst IconButton = ({ children, onClick, ...allyProps }) => (\n  <button\n    type=\"button\"\n    className={css.iconButton}\n    onClick={onClick}\n    {...allyProps}\n  >\n    {children}\n  </button>\n);\n\nIconButton.defaultProps = {\n  onClick: () => null,\n  children: null,\n};\n\nIconButton.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.node,\n  'aria-label': PropTypes.string.isRequired,\n};\n\nexport default IconButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"Modal_backdrop__xTnIT\",\"modal__content\":\"Modal_modal__content__VSCXP\",\"close__button\":\"Modal_close__button__Jn7hG\"};","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport IconButton from '../IconButton';\nimport { ImCross } from 'react-icons/im';\nimport css from './Modal.module.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ onClose, children }) => {\n  useEffect(() => {\n    const hendleKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', hendleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', hendleKeyDown);\n    };\n  }, [onClose]);\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  const handleClose = e => {\n    onClose();\n  };\n\n  return createPortal(\n    <div className={css.backdrop} onClick={handleBackdropClick}>\n      <div className={`${css.modal__content} `}>\n        <IconButton\n          className={css.close__button}\n          onClick={handleClose}\n          aria-label=\"Close modal\"\n        >\n          <ImCross fill=\"#008800\" />\n        </IconButton>\n\n        {children}\n      </div>\n    </div>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {\"spaceBackground\":\"ContactsPage_spaceBackground__WJnxD\",\"container\":\"ContactsPage_container__BnqXB\",\"heading\":\"ContactsPage_heading__7-y5D\"};","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport IconButton from 'components/IconButton';\nimport Loader from 'components/Loader/Loader';\nimport Modal from 'components/Modal';\nimport React, { useEffect, useState } from 'react';\nimport { ImUserPlus } from 'react-icons/im';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  requestContacts,\n  selectContactsError,\n  selectContactsIsLoading,\n} from 'redux/contactsReducer';\nimport css from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n\n  useEffect(() => {\n    dispatch(requestContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.spaceBackground}>\n      <div className={css.container}>\n        {showModal && (\n          <Modal onClose={toggleModal}>\n            <ContactForm closeModal={toggleModal} />\n          </Modal>\n        )}\n\n        <div className=\"contacts__header\">\n          <h2 className={css.heading}>Contacts</h2>\n\n          <IconButton onClick={toggleModal} aria-label=\"Add contact\">\n            <ImUserPlus size={26} fill=\"#00ff00\" />\n          </IconButton>\n        </div>\n\n        <Filter />\n        {isLoading && !error && <Loader />}\n        <ContactList />\n        {/* <div className=\"contacts-container\">\n          {isLoading && !error && <Loader />}\n          <ContactList /> */}\n        {/* </div> */}\n      </div>\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["schema","Yup","shape","name","matches","required","number","INITIAL_VALUES","closeModal","inputNameId","nanoid","inputNumberId","dispatch","useDispatch","contacts","useSelector","selectContacts","className","css","initialValues","validationSchema","onSubmit","values","resetForm","newContact","filter","contact","toLowerCase","trim","length","Notify","addContact","onAddContact","autoComplete","htmlFor","maxLength","id","type","placeholder","component","dispathc","contactsFilter","selectFilter","filteredContacts","includes","renderedContacts","map","onClick","Confirm","deleteContact","backgroundColor","borderRadius","fontFamily","titleColor","messageColor","okButtonColor","okButtonBackground","cancelButtonColor","cancelButtonBackground","handleDelete","fill","value","onChange","e","setFilter","target","IconButton","children","allyProps","defaultProps","modalRoot","document","querySelector","onClose","useEffect","hendleKeyDown","code","window","addEventListener","removeEventListener","createPortal","currentTarget","useState","showModal","setShowModal","toggleModal","isLoading","selectContactsIsLoading","error","selectContactsError","requestContacts","size","Loader"],"sourceRoot":""}